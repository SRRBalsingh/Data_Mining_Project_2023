# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score

# Load your dataset (assuming it's in a CSV file)
data = pd.read_csv('C:/Users/sarwe/Spyder files/Data Mining/winemag-data_first150k.csv')

# Define a function to determine sentiment based on 'points' column
def get_sentiment(points):
    if points >= 95:
        return 'excellent'
    elif points >= 90:
        return 'very_good'
    elif points >= 85:
        return 'good'
    elif points >= 80:
        return 'bad'
    else:
        return 'very_bad'

# Apply the get_sentiment function to create a new column 'sentiment'
data['sentiment'] = data['points'].apply(get_sentiment)

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(data['description'], data['sentiment'], test_size=0.2, random_state=42)

# Create a CountVectorizer to convert text data into numerical features
vectorizer = CountVectorizer()

# Fit and transform the training data
X_train_vectorized = vectorizer.fit_transform(X_train)

# Create a Multinomial Naive Bayes classifier
classifier = MultinomialNB()

# Train the classifier on the vectorized training data
classifier.fit(X_train_vectorized, y_train)

# Transform the testing data
X_test_vectorized = vectorizer.transform(X_test)

# Predict the sentiment of reviews in the testing data
y_pred = classifier.predict(X_test_vectorized)

# Calculate the accuracy of the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy of the model: {accuracy * 100:.2f}%")

# positive review test
your_review = "This wine is absolutely fantastic. It has a rich and complex flavor with a smooth finish."

# Preprocess your review using the same TF-IDF vectorizer
your_review_vectorized = vectorizer.transform([your_review])

# Predict the sentiment of your review
predicted_sentiment = classifier.predict(your_review_vectorized)[0]

# Print the predicted sentiment
print(f"Predicted sentiment for your review: {predicted_sentiment}")

# negative review test
n_review = "This wine is flat and has quite a strong taste. The colour is very dark and has a bitter after taste."
# Preprocess your review using the same TF-IDF vectorizer
n_review_vectorized = vectorizer.transform([n_review])

# Predict the sentiment of your review
predicted_sentiment_n = classifier.predict(n_review_vectorized)[0]

# Print the predicted sentiment
print(f"Predicted sentiment for your review: {predicted_sentiment_n}")

# positive review
m_review = "the best wine in the world."
# Preprocess your review using the same TF-IDF vectorizer
m_review_vectorized = vectorizer.transform([m_review])

# Predict the sentiment of your review
predicted_sentiment_m = classifier.predict(n_review_vectorized)[0]
print(f"Predicted sentiment for your review: {predicted_sentiment_m}")

sample_reviews = [
    "I had high hopes for this wine, but it fell flat. It lacks flavor and character.",
    "This wine is a disappointment. It tastes cheap and leaves a bitter aftertaste.",
    "I regret buying this wine. It's bland and unimpressive.",
    "I can't believe I wasted money on this wine. It's simply not worth it.",
    "This wine is a letdown. It's harsh and doesn't live up to its price.",
    "I expected better from this wine. It's mediocre at best.",
    "This wine is a poor choice. It lacks depth and complexity.",
    "I wouldn't recommend this wine to anyone. It's a complete miss.",
    "I had a terrible experience with this wine. It's not enjoyable at all.",
    "I can't find anything positive to say about this wine. It's a total dud.",
    "This wine is a disappointment. It's bland and unremarkable.",
    "I was hoping for something better, but this wine is a letdown.",
    "I wouldn't buy this wine again. It's a waste of money.",
    "This wine is nothing special. It's forgettable and uninspiring.",
    "I'm not impressed with this wine. It lacks the depth and character I expected."
]

# Vectorize the sample reviews
sample_reviews_vec = vectorizer.transform(sample_reviews)

# Predict sentiment for sample reviews
sample_sentiments = classifier.predict(sample_reviews_vec)

for review, sentiment in zip(sample_reviews, sample_sentiments):
    print(f"Review: {review}")
    print(f"Predicted Sentiment: {sentiment}")
    print()