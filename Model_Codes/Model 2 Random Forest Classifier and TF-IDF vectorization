import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.impute import SimpleImputer

# Load data from a CSV file
data = pd.read_csv('C:/Users/sarwe/Spyder files/Data Mining/downsampled_dataset.csv')  # Replace with your actual file path

# Define the labels based on points
def label_sentiment(points):
    if points > 95:
        return 'excellent'
    elif points > 90:
        return 'very good'
    elif points > 85:
        return 'good'
    elif points > 80:
        return 'bad'
    else:
        return 'very bad'

# Apply the label_sentiment function to create the target labels
data['sentiment'] = data['points'].apply(label_sentiment)

# Drop unnecessary columns
data = data.drop(['country', 'description', 'designation', 'province', 'region_1', 'region_2', 'variety', 'winery'], axis=1)

# Split data into features (X) and target labels (y)
X = data.drop('sentiment', axis=1)
y = data['sentiment']

# Impute missing values in X with the mean (you can choose another strategy if needed)
imputer = SimpleImputer(strategy='mean')
X = imputer.fit_transform(X)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the Random Forest Classifier
clf = RandomForestClassifier(random_state=42)
clf.fit(X_train, y_train)

# Make predictions on the test data
y_pred = clf.predict(X_test)

# Calculate accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy * 100:.2f}%')